<script>
    let order_time = moment().subtract(3, "minutes");

    let build_order = (order) => {

            let element = document.getElementById('inject-orders');
            let row = document.createElement('tr');

            let order_id = document.createElement('td');
            let order_id_data = document.createTextNode(`12345`);
            order_id.appendChild(order_id_data);
            row.appendChild(order_id)


            let create_lineitem_data = (lineItems) => {
                let lineitems = document.createElement('td');
                lineItems.forEach(item => {
                   let lineitem = document.createElement('p');
                   lineitem.style.textTransform = "capitalize";
                   let line = document.createTextNode(`${item.snack_name.replace(/[_-]/g, " ")} x ${item.number}`);
                   lineitem.appendChild(line);
                   lineitems.appendChild(lineitem);
                })
                return lineitems;
            }
            row.appendChild(create_lineitem_data(order.lineItems));

            if (order.status === 'preparing') {

                let timer = document.createElement('td');
                let current_time = moment();
                let time = current_time.diff(order_time)/1000;
                let timer_data= document.createTextNode(`${Math.floor(time/60)}:${Math.floor(time%60) < 10 ? `0${Math.floor(time%60)}`: Math.floor(time%60)}`);
                timer.appendChild(timer_data);
                row.appendChild(timer); 
            }

            if (order.status !== 'confirming') {
                let discount = document.createElement('td');
                let label = document.createElement('span');
                label.className = "label label-table ";
                if (order.is_given_discount) {
                    label.className += "label-danger";
                    label.appendChild(document.createTextNode("YES"));
                } else {
                    label.className += "label-success";
                    label.appendChild(document.createTextNode("NO"));
                }
                discount.appendChild(label);
                row.appendChild(discount);
            }
            

            
            if (order.status !== 'complete'){
                let update_status = document.createElement('td');
                let button = document.createElement('button');
                button.className = "btn btn-primary";
                let button_text = document.createTextNode('UPDATE');
                switch (order.status) {
                    case 'confirming':
                        button_text = document.createTextNode('CONFIRM');
                        break;

                    case 'preparing':
                        button_text = document.createTextNode('READY');
                        break;

                    case 'ready':
                        button_text = document.createTextNode('COMPLETE');
                        break;

                    default:
                        console.log('400: invalid order status');
                }
                
                button.appendChild(button_text);
                update_status.appendChild(button);
                row.appendChild(update_status);
            }

            element.appendChild(row);
    }
    let remove_orders = () => {
            let element = document.getElementById('inject-orders');
            element.innerHTML = "";
    }


    let timeout = (ms) => { return new Promise(res => setTimeout(res, ms)); }
    let update_state = (selected) => {
        
            if(selected.id !== "nav-active"){
                let current = document.getElementById("nav-active");
                selected.id = current.id
                current.id = "";

                let deselected_class = selected.className
                selected.className = current.className
                current.className = deselected_class;
                
                remove_orders();
                let header = document.getElementById("inject-orders-header");
                header.innerHTML = "";
                switch (selected.value) {
                        case 'confirming':
                            header.innerHTML = `<th id = "th-order-id">Order Id</th>
                            <th id = "th-lineitems">Order</th>
                            <th id = "th-update">Update Order</th>`;
                            break;

                        case 'preparing':
                            header.innerHTML = `<th id = "th-order-id">Order Id</th>
                            <th id = "th-lineitems">Order</th>
                            <th id = "th-timer">Timer</th>
                            <th id = "th-discount">Discount</th>
                            <th id = "th-update">Update Order</th>`;
                            break;

                        case 'ready':
                            header.innerHTML = `<th id = "th-order-id">Order Id</th>
                            <th id = "th-lineitems">Order</th>
                            <th id = "th-discount">Discount</th>
                            <th id = "th-update">Update Order</th>`;
                            break;
                        
                        case 'complete':
                            header.innerHTML = `<th id = "th-order-id">Order Id</th>
                            <th id = "th-lineitems">Order</th>
                            <th id = "th-discount">Discount</th>`;
                            break;

                        default:
                            console.log('400: invalid order status');
                    }
            }
    }
    let get_orders = async () => {
        
        await timeout(5000);
        let err = null;
        while( err === null ) {

            let state = document.getElementById("nav-active").value;
            let url = `http://localhost:8080/vendor/orders/valve/${state}`;

            await axios.get(url)
            .then(async res => {
                let orders = res.data;
                await timeout(500);
                remove_orders();
                orders.forEach(order => {
                    build_order(order);
                })

            }).catch(error => {
                err = error;
                console.log(err);
            });
        }
    }
    get_orders();
    
</script>

<div class="main">
    <div class = "panel">
        <div class = "panel-heading">
            <div id = "inject-loading" style="float: left; position: absolute; margin: 1%"></div>

            <h1 class = "panel-title text-primary" style = "text-align: center; font-size: 1.75em; text-transform: uppercase"> {{van}} DASHBOARD</h1>
        </div>
        <div class ="panel-body">
            <div class="row">
                <div class= "col-xs-5 col-sm-2 col-md-2 col-xs-offset-2 col-sm-offset-1 col-md-offset-1"> 
                    <button id ="" class="btn nav-btn btn-info" value ="confirming" onclick = "update_state(this)">Unconfirmed Orders</button>
                </div>
                <div class= "col-xs-5 col-sm-2 col-md-2 col-xs-offset-2 col-sm-offset-1 col-md-offset-1"> 
                    <button id ="nav-active" class="btn nav-btn btn-primary"  value ="preparing" onclick = "update_state(this)">Preparing Orders</button>
                </div>
                 <div class= "col-xs-5 col-sm-2 col-md-2 col-xs-offset-2 col-sm-offset-1 col-md-offset-1"> 
                    <button id =""class="btn nav-btn btn-info" value ="ready" onclick = "update_state(this)">Ready Orders</button>
                </div>
                <div class= "col-xs-5 col-sm-2 col-md-2 col-xs-offset-2 col-sm-offset-1 col-md-offset-1"> 
                    <button id ="" class="btn nav-btn btn-info" value ="complete" onclick = "update_state(this)">Completed Orders</button>
                </div>               
            </div>
        </div>
    </div>

    <div class = "panel">
        <div class = "panel-heading">
            <h1 class = "panel-title text-primary" style = "text-align: center; font-size: 1.5em;">ORDERS</h1>
        </div>
        <div class ="panel-body">
            <div class ="bootstrap-table">
                <div class ="fixed-table-container">
                    <div class="fixed-table-header" style="display: none;">
                        <table></table>
                    </div>
                    <table class = "table table-hover" data-sort-name ="_id">
                        <thead>
                            <tr id = "inject-orders-header">
                                <th id = "th-order-id">
                                    Order Id
                                </th>
                                <th id = "th-lineitems">
                                    Order
                                </th>
                                <th id = "th-timer">
                                    Timer
                                </th>
                                <th id = "th-discount">
                                    Discount
                                </th>
                                <th id = "th-update">
                                    Update Order
                                </th>
                            </tr>
                        </thead>
                        <tbody id = "inject-orders">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

</div>

