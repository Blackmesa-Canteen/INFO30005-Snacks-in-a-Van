
<script>
    /* THIS IS THE DYNAMIC VENDOR DASHBOARD WITH HIGH CLIENT SIDE RENDERING */

    //setting variables to be mointored
    let updating = false;
    let van_name = `{{van}}`;
    let search_mode = "search-order-id";
    let url = `{{url}}`;

    //Function to identify if there are any ongoing orders before closing SnackVan (Exception Handling)
    let check_ongoing_orders = () => {

        document.getElementById("alert-ongoing-orders").innerHTML = ""; 
        let states = ["confirming", "preparing", "ready"];
        let ongoing_orders = 0;

        //getting count of orders for "confirming", "preparing" and "ready" states
        states.forEach( async state => {
            await axios.get(`${url}/vendor/orders/${van_name}/${state}`).then(res => {
               ongoing_orders += res.data.length;
            })
            if(ongoing_orders !== 0) {
                document.getElementById("alert-ongoing-orders").innerHTML = `There are still ${ongoing_orders} ongoing orders!`;
                //returning false of any ongoing order
                return false;
            }
        });     
        return true;
    }

    //Function to close SnackVan 
    let close_van = () => {

        //requesting snackvan to close
        axios.put(`${url}/vendor/van_close/${van_name}`).then(res => {
                console.log(`${res.statusText} : ${res.status}`);
                window.location.href = `${url}/vendor/buisness`;
            }).catch(err => {console.log(err);  window.location.href = `${url}/500`;});

        /* if(check_ongoing_orders()){
        } else {
            console.log("Complete ongoing orders!"); 
        }*/
    }

    //function to update the location (without closing buisness) on the dashbord page
    let update_location = () => {

        //Closing Form modaal after successful form entry
        close_modal("update-location");
        
        //Seting up Variables
        let longitude = 0;
        let latitude = 0;
        let accuracy = 0;
        let location = {"x_pos": longitude, "y_pos": latitude};

        //Function to Open van After Vendor Geo location is identified
        let open_van = (location) => {

            //Obtaining form values
            let van_address = document.getElementById("location-address").value.trim();
            let van_location_description = document.getElementById("location-description").value.trim();
            let van_location = location;
            //let JSON_form = {"van_adress": van_address, "van_location_description": van_location_description};

             //Adding parameters for put Request
            const params = new URLSearchParams();
            params.append('van_address',van_address );
            params.append('van_location_description',van_location_description );
            params.append('van_location', location);

            //requesting snackvan to open at new location
            axios.put( `${url}/vendor/van_open/${van_name}`, params).then(res => {
                console.log(`${res.statusText} : ${res.status}`);
            }).catch(err => {console.log(err);  window.location.href = `${url}/500`;});
        }

        /* get user location via GeoAPI instead of geolocation */
        let geo_API_locating = () => {
            const geo_API_settings = {
                "async": true,
                "crossDomain": true,
                "url": "https://api.getgeoapi.com/api/v2/ip/check?api_key=0e33f90ed8de88b9f3e2d8e3848c1ec7adee696d",
                "method": "GET",
                "headers": {
                    "x-rapidapi-key": "0e33f90ed8de88b9f3e2d8e3848c1ec7adee696d",
                    "x-rapidapi-host": "ip-geo-location.p.rapidapi.com"
                }
            };
            $.ajax(geo_API_settings).done(res => {
                longitude = res.location.longitude;
                latitude = res.location.latitude;
                let isSuccessful = res.status;

                if(isSuccessful === "success"){
                    console.log("Using Pure IP locating, user location WGS84 GPS standard coordinate:" + longitude + "," + latitude);
                    return `{"x_pos": ${longitude}, "y_pos": ${latitude}}`;
                } else {
                    console.log("Location Unidentified!");
                    return null;
                }

            }).catch(err => {console.log(err);  window.location.href = `${url}/500`;});
        }
   
        /* get user location via geolocation */
        navigator.geolocation.getCurrentPosition(position => {

            longitude = position.coords.longitude;
            latitude = position.coords.latitude;
            accuracy = position.coords.accuracy;

            console.log("user location WGS84 GPS standard coordinate:" + longitude + "," + latitude);
            console.log("accuracyï¼š" + accuracy);
            if(accuracy > 10000) {
                console.log("Geolocation service is not accurate, using pure IP locating...");
                location = geo_API_locating();
                if(location){
                    open_van(location);
                }
            } else {
               open_van( `{"x_pos": ${longitude}, "y_pos": ${latitude}}`);
            }
        }, positionError => {
            console.log("Geolocation servic e is not applicable, using pure IP locating...");
            location = geo_API_locating();
            if(location){
                open_van(location);
            }
        });
    }

    //functtion to validatee update-location form
    let update_location_form_validate = () => {
        document.getElementById("error-location-description").innerHTML = "";
        let van_location_description = document.getElementById("location-description").value.trim();    
        if (van_location_description.length > 200) {
            document.getElementById("error-location-description").innerHTML = "Description of location too long!";
        } else if (van_location_description.length === 0) {
            document.getElementById("error-location-description").innerHTML = "Description of location required!";
        } else {
            document.getElementById("error-location-description").innerHTML = ""; 
            update_location();
        }
    }
    //function to search by Exact Ordrer id or Customer ID
    let search = () => {

        //Setting up Ui and vaariables
        let search_string = document.getElementById("search-string").value;
        let element = document.getElementById('inject-search-details');
        element.innerHTML = "";
        document.getElementById('search-details-header').style.display = "none";

        //requesting order based on exact match to search string, for a defined search mode (ORDER ID or CUSTOMER ID)
        axios.get(`${url}/vendor/search_order/${van_name}?search_string=${search_string}&search_mode=${search_mode}`)
        .then(orders => {

            //Building Table UI for search modal
            console.log(orders.data);
            if(orders.data.length !== 0){
                document.getElementById('search-details-header').style.display = "";

                //For Ech Each Table Row add an order
                orders.data.forEach(order => {
                    let row = document.createElement('tr');
                     //Sppending Order ID to table row
                    let order_id = document.createElement('td');
                    order_id.style.textTransform = "capitalize";
                    let order_id_data = document.createTextNode(order._id.substring(order._id.length - 6).toUpperCase());
                    order_id.appendChild(order_id_data);
                    row.appendChild(order_id);

                    //Appending Order Status to table row
                    let order_status = document.createElement('td');
                    order_status.style.textTransform = "capitalize";
                    let order_status_data = document.createTextNode(order.status);
                    order_status.appendChild(order_status_data);
                    row.appendChild(order_status);

                     //Appending End Time to table row
                    let end_time = document.createElement('td');
                    let end_time_data = document.createTextNode(moment(order.end_time).format('MMMM Do YYYY, h:mm a'));
                    end_time.appendChild(end_time_data);
                    row.appendChild(end_time);

                    //Appending onClick order details modal to row functionality
                    row.id = order._id;
                    row.onclick = function()  { close_modal('search'); show_order_details(this);};
                    element.appendChild(row);
                });
            //Exception Handling in case no results are found
            } else {
                let row = document.createElement('tr');
                row.style.textTransform = "capitalize";
                row.style.textAlign = "center";
                no_results_data = document.createTextNode("No results Found");
                row.appendChild(no_results_data);
                element.appendChild(row);
            }
        });
}
    //function to select search mode (radio Buttons on Search modal)
    let select_search_mode = (btn) => {
        if (!(btn.classList.contains("active"))){

            let btn_toggle_off = document.getElementById(search_mode);

            let btn_toggle_on_class = btn_toggle_off.className;
            btn_toggle_off.className = btn.className;
            btn.className =  btn_toggle_on_class;

            btn_toggle_off.ariaPressed = false;
            btn.ariaPressed = true;

            search_mode = btn.id;
            console.log(search_mode);
        }
        
    }
    //function to show a modal
    let show_modal = (modal_name) => {
        document.getElementById(modal_name).style.display = "block";
        document.getElementById("background-fade").style.display = "block";
    }

    //function to close a modal
    let close_modal = (mdl) => {
        document.getElementById("background-fade").style.display = "none";
        document.getElementById(mdl).style.display = "none";
    }

    //function to show order details in modal format
    let show_order_details = (order) => {

        //requesting order details of specified order (using FULL Order ID)
        axios.get(`${url}/vendor/order/${order.id}`).then (res => {
            //on succesful response, building order details modal (UI)
            let order_details = res.data;
            let element = document.getElementById('inject-order-details');
            element.innerHTML = "";

            //Appending Customer Name 
            document.getElementById("det-order-cust-name").innerHTML = order_details.customer_name;
            //Appending Partial ORDER ID
            document.getElementById("det-order-num").innerHTML = order.id.substring(order.id.length - 6).toUpperCase();


            //Appending Lineitems
            order_details.lineItems.forEach(item => {
                let row = document.createElement('tr');

                let item_name = document.createElement('td');
                item_name.style.textTransform = "capitalize";
                let item_name_data = document.createTextNode(`${item.snack_name.replace(/[_-]/g, " ")}`);
                item_name.appendChild(item_name_data);
                row.appendChild(item_name);

                let item_quantity = document.createElement('td');
                let item_quantity_data = document.createTextNode(`${item.number}`);
                item_quantity.appendChild(item_quantity_data);
                row.appendChild(item_quantity);

                let item_total = document.createElement('td');
                let item_total_data = document.createTextNode(`\$${item.total}`);
                item_total.appendChild(item_total_data);
                row.appendChild(item_total);

                element.appendChild(row);
            })

            let row = document.createElement('tr');
            let empty_td = document.createElement('td');
            row.appendChild(empty_td);

            //Appending Total Row
            let grand_total_td = document.createElement('td');
            let grand_total_td_data = document.createTextNode(`\$${order_details.cost}`);
            if(order_details.refund > 0 && order_details.refund){
               
                let refund_td = document.createElement('td');
                let refund_td_data = document.createTextNode(`-\$${order_details.refund}`);
                refund_td.style.color = "red";
                refund_td.appendChild(refund_td_data);
                row.appendChild(refund_td);
                grand_total_td_data = document.createTextNode(`\$${order_details.cost - order_details.refund}`);

            } else {
                let empty_td_2 = document.createElement('td');
                row.appendChild(empty_td_2);
            }

            grand_total_td.appendChild(grand_total_td_data);
            row.appendChild(grand_total_td);
            row.style.backgroundColor = "#FFDA77";
            element.appendChild(row);

             //Appending Start ttime
            document.getElementById("det-order-time").innerHTML = moment(order_details.start_time).format('MMMM Do YYYY, h:mm a');
            
            //Appending Discount GIven
            order_details.is_given_discount ? document.getElementById("det-order-discount").innerHTML = "Yes":document.getElementById("det-order-discount").innerHTML = "No";
            show_modal("order-details");
        //Catching Error and redirecting on internal server error
        }).catch ( err => {
            console.log(err);  window.location.href = `${url}/500`;
        });
    }
    //function to mark order is fulffilled (updatte order status form confirming -> preparing etc.)
    let update_order_status = (btn, order_id) => {
        btn.className = "btn btn-success btn-rounded";
        axios.put(`${url}/vendor/update_order_status/${order_id}`)
        .catch(error => {
            console.log(error);
        });
    }
    //function to build order details UI for a specified order based on selected status( confirming orders, peapring orders, etc.)
    let build_order = (order) => {
            //if selected ststaus is not updating
            if(!(updating)){
                let element = document.getElementById('inject-orders');
                let row = document.createElement('tr');

                //Appending Order ID with link to open order_details
                let order_id = document.createElement('td');
                order_id.id = order._id;
                order_id.onclick = function()  {show_order_details(this)};

                let order_id_a = document.createElement('a');
                order_id_a.className += "btn-link ";
                let order_id_data = document.createTextNode(order._id.substring(order._id.length - 6).toUpperCase());

                order_id_a.appendChild(order_id_data);
                order_id.appendChild(order_id_a);
                row.appendChild(order_id)

                //Appending Lineitems data iteratively
                let create_lineitem_data = (lineItems) => {
                    let lineitems = document.createElement('td');
                    lineItems.forEach(item => {
                    let lineitem = document.createElement('p');
                    lineitem.style.textTransform = "capitalize";
                    let line = document.createTextNode(`${item.snack_name.replace(/[_-]/g, " ")} x ${item.number}`);
                    lineitem.appendChild(line);
                    lineitems.appendChild(lineitem);
                    })
                    return lineitems;
                }
                row.appendChild(create_lineitem_data(order.lineItems));

                //Adding  a timer if the order status is preparing
                if (order.status === 'preparing') {
                    
                    //calculating remaining timme / exceded time over 15 mminutes
                    let timer = document.createElement('td');
                    let current_time = moment();
                    let end_time = moment(order.end_time);
                    let time = end_time.diff(current_time)/1000;
                    let order_time_over = false;
                    if (time < 0) {
                     time = current_time.diff(end_time)/1000 ;
                     order_time_over = true;
                    }

                    //exception handling for timer diplay 
                    let timer_ui = "" ;
                    if(Math.floor(time/60) >= 100) {
                        timer_ui = `99:59+`; 
                    } else if (Math.floor(time%60) < 10) {
                        timer_ui = `${Math.floor(time/60)}:0${Math.floor(time%60)}`;
                    } else {
                        timer_ui = `${Math.floor(time/60)}:${Math.floor(time%60)}`;
                    }

                    let timer_data= document.createTextNode(timer_ui);
                    if (order_time_over) {
                        timer.style.color = "red";
                    }
                    timer.appendChild(timer_data);
                    row.appendChild(timer);

                //Adding  end time  if the order is already ready
                } else if (order.status === 'ready') {

                    let timer = document.createElement('td');
                    let end_time = moment(order.end_time).format('MMMM Do YYYY, h:mm a');
                    let timer_data= document.createTextNode(end_time);
                    timer.appendChild(timer_data);
                    row.appendChild(timer); 
                }
                // if the order is confirmed, then showing discount details
                if (order.status !== 'confirming') {
                    let discount = document.createElement('td');
                    let label = document.createElement('span');
                    label.className = "label label-table ";
                    if (order.is_given_discount) {
                        label.className += "label-danger";
                        label.appendChild(document.createTextNode("YES"));
                    } else {
                        label.className += "label-success";
                        label.appendChild(document.createTextNode("NO"));
                    }
                    discount.appendChild(label);
                    row.appendChild(discount);
                }
                

                // if the order is not completd yet, showing update status (fulfilled order) buttons
                if (order.status !== 'complete'){
                    let update_status = document.createElement('td');
                    let button = document.createElement('button');
                    button.className = "btn btn-primary btn-rounded";
                    button.onclick = function() {update_order_status(this, order._id)};
                    let button_text = document.createTextNode('UPDATE');
                    switch (order.status) {
                        case 'confirming':
                            button_text = document.createTextNode('CONFIRM');
                            break;

                        case 'preparing':
                            button_text = document.createTextNode('READY');
                            break;

                        case 'ready':
                            button_text = document.createTextNode('COMPLETE');
                            break;

                        default:
                            console.log('400: invalid order status');
                    }
                    button.appendChild(button_text);
                    update_status.appendChild(button);
                    row.appendChild(update_status);
                }
                element.appendChild(row);
            }
    }
    //function to remove order UI from dahboard
    let remove_orders = () => {
            let element = document.getElementById('inject-orders');
            element.innerHTML = "";
    }

    //function to setTimeout in event loop
    let timeout = (ms) => { return new Promise(res => setTimeout(res, ms)); }

    //function to select viewing state of orders (confirming orders, preparing orders, ready orders, complete orders)
    let update_state = async (selected) => {

        //Setting up UI aand radio buttons
        updating = true;
        document.getElementById("order-table").style.filter =" blur(2px)";
        document.getElementById("order_count").innerHTML = `0`;
        if(selected.id !== "nav-active"){
            remove_orders();
            let current = document.getElementById("nav-active");
            selected.id = current.id
            current.id = "";

            let deselected_class = selected.className
            selected.className = current.className
            current.className = deselected_class;
            
            //Updating taable haders based on selected state
            let header = document.getElementById("inject-orders-header");
            header.innerHTML = "";
            switch (selected.value) {
                    case 'confirming':
                        header.innerHTML = `<th id = "th-order-id">Order Id</th>
                        <th id = "th-lineitems">Order</th>
                        <th id = "th-update">Update Order</th>`;
                        document.getElementById("search-btn").style.display = "none";
                        break;

                    case 'preparing':
                        header.innerHTML = `<th id = "th-order-id">Order Id</th>
                        <th id = "th-lineitems">Order</th>
                        <th id = "th-timer">Timer</th>
                        <th id = "th-discount">Discount</th>
                        <th id = "th-update">Update Order</th>`;
                        document.getElementById("search-btn").style.display = "none";
                        break;

                    case 'ready':
                        header.innerHTML = `<th id = "th-order-id">Order Id</th>
                        <th id = "th-lineitems">Order</th>
                        <th id = "th-timer">Ready at</th>
                        <th id = "th-discount">Discount</th>
                        <th id = "th-update">Update Order</th>`;
                        document.getElementById("search-btn").style.display = "none";
                        break;
                    
                    case 'complete':
                        header.innerHTML = `<th id = "th-order-id">Order Id</th>
                        <th id = "th-lineitems">Order</th>
                        <th id = "th-discount">Discount</th>`;
                        document.getElementById("search-btn").style.display = "inline-block";
                        break;

                    default:
                        console.log('400: invalid order status');
                }
        }
        //timing ouut to avoid overlap of build orders and update orders
        await timeout(1500);
        updating = false;
        document.getElementById("order-table").style.filter ="";
    }

    //MAIN EVENT LOOP TO REFRESH EVERY 0.5s with updated orders and display UI accordingly
    let get_orders = async () => {
        
        await timeout(5000);
        let err = null;
        //setting event loop to break on fatal error and redirect to internal server error
        while( err === null ) {

            let state = document.getElementById("nav-active").value;

            //requesting filtered orders based on order state
            await axios.get(`${url}/vendor/orders/${van_name}/${state}`)
            .then(async res => {
                //Main function loop to display Selected ORDERS
                let orders = res.data;
                await timeout(500);
                remove_orders();
                orders.length < 100 ? document.getElementById("order_count").innerHTML = `${orders.length}`: document.getElementById("order_count").innerHTML = `99+`;
                orders.forEach(order => {
                    build_order(order);
                })

            }).catch(error => {
                err = error;
                console.log(err);  
                window.location.href = `${url}/500`;
            });
        }
    }

    //MAIN EVENT LOOP CALL
    get_orders();
    
</script>

<div class="main">
    <div class = "panel">
        <div class = "panel-heading">
            <div id = "inject-loading" style="float: left; position: absolute; margin: 1%"></div>

            <h1 class = "panel-title text-primary mar-btm" style = "text-align: center; font-size: 1.75em; text-transform: uppercase"> {{van}} DASHBOARD</h1>
        </div>
        <div class ="panel-body">
            <div class="row" style = "display: flex; flex-direction: row; justify-content: space-around;">
                <div class= "col-xs-5 col-sm-2 col-md-2"> 
                    <button id ="" class="btn nav-btn btn-info" value ="confirming"  style = "width: 150px" onclick = "update_state(this)">Unconfirmed Orders</button>
                </div>
                <div class= "col-xs-5 col-sm-2 col-md-2 "> 
                    <button id ="nav-active" class="btn nav-btn btn-primary"  value ="preparing"  style = "width: 150px" onclick = "update_state(this)">Preparing Orders</button>
                </div>
                 <div class= "col-xs-5 col-sm-2 col-md-2"> 
                    <button id =""class="btn nav-btn btn-info" value ="ready" style = "width: 150px" onclick = "update_state(this)">Ready Orders</button>

                </div>
                <div class= "col-xs-5 col-sm-2 col-md-2"> 
                    <button id ="" class="btn nav-btn btn-info" value ="complete"  style = "width: 150px" onclick = "update_state(this)">Completed Orders</button>
                </div>               
            </div>
        </div>
    </div>

    <div class = "panel">
        <div class = "panel-heading" style ="display: flex; flex-direction: row; justify-content: center; align-items: center">
            <h1 class = "panel-title text-primary" style = "text-align: center; font-size: 1.5em;">ORDERS</h1>
            <span id = "order_count" class="badge badge-warning" style ="width: auto; height: 25px; padding: 6px">0</span>
        </div>
        <div class ="panel-body">
            <div class ="bootstrap-table">
                <div class ="fixed-table-container">
                    <div class="fixed-table-header">
                        <button id = "search-btn" class="btn btn-mint" type="button" style="display: none; float: right; width: 200px" onclick="show_modal('search')">Search Orders</button>
                    </div>
                    <table id = "order-table"class = "table" data-sort-name ="_id">
                        <thead>
                            <tr id = "inject-orders-header">
                                <th id = "th-order-id">
                                    Order Id
                                </th>
                                <th id = "th-lineitems">
                                    Order
                                </th>
                                <th id = "th-timer">
                                    Timer
                                </th>
                                <th id = "th-discount">
                                    Discount
                                </th>
                                <th id = "th-update">
                                    Update Order
                                </th>
                            </tr>
                        </thead>
                        <tbody id = "inject-orders">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="panel-footer mar-rgt" style="display: flex; flex-direction: row; justify-content: flex-end;">
            <button id = "update-location-btn" class="btn btn-mint mar-rgt" type="button" style="width: 200px" onclick="show_modal('update-location')">Update Location</button>
            <button id = "close-btn" class="btn btn-danger" type="button" style="width: 200px" onclick="show_modal('close-business')">Close SnackVan</button>
        </div>
    </div>
    
    <div id = "order-details" class = "bootbox modal fade in" tabindex="-1" style = "display: none;">
        <div class = "modal-dialog">
            <div class = "modal-content">
                <div class ="modal-header">
                    <h3 class="modal-title">Order Details</h3>
                    <button type="button" class="close" onclick = 'close_modal("order-details")'>
                        <i class="pci-cross pci-circle"></i>
                    </button>
                </div>
                <div class ="modal-body">
                    <div class = "bootbox-body" style = "display: block"> 
                        <div style = "display: flex; flex-direction: row; justify-content: space-around" >
                            <h6 style = "font-weight: 100;">Customer Name: <span id = "det-order-cust-name" style = "font-weight: bold;"></span></h6>
                            <h6 style = "font-weight: 100;">Order Number: <span id = "det-order-num" style = "font-weight: bold;"></span></h6>
                        </div>
                        <div class = "bootstrap-table">
                            <div class ="fixed-table-container">
                                <div class="fixed-table-header" style="display: none;">
                                    <table></table>
                               </div>
                               <table class = "table table-hover" data-sort-name ="_id">
                                    <thead>
                                        <tr>
                                            <th>Item Name</th>
                                            <th>Quantity</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody id = "inject-order-details">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div style = "display: flex; flex-direction: row; justify-content: space-around" >
                            <h6 style = "font-weight: 100;">Order Start Time: <span id = "det-order-time" style = "font-weight: bold;"></span></h6>
                            <h6 style = "font-weight: 100;">Discounted: <span id = "det-order-discount" style = "font-weight: bold;"></span></h6>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id = "search" class = "bootbox modal fade in" tabindex="-1" style = "display: none;">
        <div class = "modal-dialog">
            <div class = "modal-content">
                <div class ="modal-header">
                    <h3 class="modal-title">Order Search</h3>
                    <button type="button" class="close" onclick = 'close_modal("search")'>
                        <i class="pci-cross pci-circle"></i>
                    </button>
                </div>
                <div class ="modal-body">
                    <div class = "bootbox-body" style = "display: block">
                        <div class="input-group mar-btm">
                            <input id = "search-string" type="text" placeholder="Search Exact Match" class="form-control">
                            <span class="input-group-btn">
                                <button id = "search-btn" class="btn btn-mint" type="button" onclick="search()">Search</button>
                            </span>
					    </div>
                        <div class="btn-group" style = "display: flex; flex-direction: row; justify-content: center">
                            <button id = "search-order-id" class="btn btn-primary active" aria-pressed = "true"  type="button" onclick="select_search_mode(this)" style = "margin-right: 2rem;">Search By Order ID</button>
                            <button id = "search-cust-id" class="btn btn-primary"  type="button" onclick="select_search_mode(this)">Search by Customer ID</button>
                        </div>
                        <table class = "table table-hover mar-top" data-sort-name ="_id">
                            <thead id = "search-details-header" style = "display: none;">
                                <tr>
                                    <th>Order ID</th>
                                    <th>Status</th>
                                    <th>End Time</th>
                                </tr>
                            </thead>
                            <tbody id = "inject-search-details">
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class ="modal-footer">
                    <button type="button" class="btn btn-danger" onclick = 'close_modal("search")'>
                        Return to Dashboard
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div id = "update-location" class = "bootbox modal fade in" tabindex="-1" style = "display: none;">
        <div class = "modal-dialog">
            <div class = "modal-content">
                <div class ="modal-header">
                    <h3 class="modal-title">Update Van Location</h3>
                    <button type="button" class="close" onclick = 'close_modal("update-location")'>
                        <i class="pci-cross pci-circle"></i>
                    </button>
                </div>
                <div class ="modal-body">
                    <div class = "bootbox-body" style = "display: block">
                        <div class = "form-group" style=" width: 400px; margin-top: 40px;">
                            <label class = "control-label" style = "color: black; font-size: 1.6rem; padding-left: 10px">Address</label>
                            <input id ="location-address" type="text" class="form-control input-lg">
                            <label class = "control-label mar-top" style = "color: black; font-size: 1.6rem; padding-left: 10px"> Description of your Location * (200 Charcters)</label>
                            <input id ="location-description" type="text" class="form-control input-lg">
                            <label id ="error-location-description" class = "control-label mar-top" style = "color: red; font-size: 1.2rem; padding-left: 10px"></label>
                        </div>
                    </div>
                </div>
                <div class ="modal-footer">
                    <button type="button" class="btn btn-mint" onclick = 'update_location_form_validate()'>
                        Update Location
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div id = "close-business" class = "bootbox modal fade in" tabindex="-1" style = "display: none;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <button type="button" class="close" onclick = 'close_modal("close-business")'>
                        <i class="pci-cross pci-circle"></i>
                    </button>

                <div class="bootbox-body"><h4>Are you sure?</h4><h6 id = "alert-ongoing-orders"></h6></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" onclick = 'close_modal("close-business")'>Cancel</button>
                    <button type="button" class="btn btn-danger" onclick = 'close_van()'>Close SnackVan</button>
                </div>
            </div>
        </div>
    </div>

    <div id = "background-fade" class="modal-backdrop fade in" style = "display: none;"></div>
</div>

